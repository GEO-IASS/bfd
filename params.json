{"name":"bfd","tagline":"MATLAB code for Bayesian interpretation of Fisher's discriminant","body":"Bayesian Fisher's discriminant\r\n==============================\r\n\r\nThis page describes how to use the so-called Bayesian Fisher\r\nDiscriminant (BFD) software.\r\n\r\nPlease note that in the subsequent discussion we will be using these\r\nreferences:\r\n\r\n1.  T. Peña-Centeno and N. D. Lawrence. (2006) [\"Optimising kernel\r\n    parameters and regularisation coefficients for non-linear\r\n    discriminant\r\n    analysis\"](http://ml.sheffield.ac.uk/~neil/cgi-bin/publications/bibpage.cgi?keyName=Pena:fbd04)\r\n    in Journal of Machine Learning Research, accepted for publication.\r\n    \r\n2.  T. Peña-Centeno and N. D. Lawrence. (2004) [\"Optimising kernel\r\n    parameters and regularisation coefficients for non-linear\r\n    discriminant\r\n    analysis\"](http://ml.sheffield.ac.uk/~neil/cgi-bin/publications/bibpage.cgi?keyName=Pena:fbd-tech04)\r\n    Technical Report no CS-04-13,\r\n     University of Sheffield, Department of Computer Science.\r\n\r\n3.  Kevin J. Lang and Michael J. Witbrock (1988) \"Learning to tell two\r\n    spirals apart\" in Proceedings of the 1988 Connectionist Summer\r\n    School. Morgan Kauffman\r\n4.  Spiral data, available\r\n    [here](http://www-ra.informatik.uni-tuebingen.de/SNNS/SNNS-Mail/96/0464.html).\r\n\r\n5.  Gunnar Rätsch's\r\n    [data](http://users.rsise.anu.edu.au/~raetsch/data/index).\r\n\r\n### Release Information\r\n\r\nCurrent release is 0.12\r\n\r\nRelease 0.12 was used for the experiments presented in [1]. The code was\r\nwritten with flexibility in mind so probably there is room to make\r\nimprovements in terms of efficiency of computation.\r\n\r\nRelease 0.11 corresponds to the results presented in [2].\r\n\r\nThe BFD software requires some functions, written by Neil D. Lawrence,\r\nthat have been put together in form of the\r\n[NDLUTIL](http://ml.sheffield.ac.uk/~neil/ndlutil/downloadFiles)\r\ntoolbox. You may access this toolbox with the username and password you\r\nare given when you register for the BFD toolbox. There are many versions\r\nof this toolbox but we recommend only a few of them in order to obatin\r\nthe results of [1].\r\n\r\n**Toolbox** | **Version**\r\n------------|------------\r\n[NDLUTIL](/ndlutil/downloadFiles) | 0.12 (or below)\r\n[Netlab](http://www.aston.ac.uk/eas/research/groups/ncrg/resources/netlab/) | 3.3 (It should work with v3.2 as well)\r\n[ls-SVMlab](http://www.esat.kuleuven.ac.be/sista/lssvmlab/) | 1.5\r\n\r\nTo obtain the classification results for benchmark data it will be\r\nnecessary to download Gunnar Rätsch's data, available at [5]. You will\r\nalso need the function\r\n[normal](http://www.ncrg.aston.ac.uk/netlab/worked.php), written by Ian\r\nT. Nabney. **Note**: this function does not belong to the Netlab\r\ntoolbox, but is rather a worked example.\r\n\r\nPlease give a read to the **readme.txt** file that comes in this\r\ndistribution to have more details about the installation procedure.\r\n\r\nExamples\r\n--------\r\n\r\n### Synthetic datasets\r\n\r\nThe experiments with synthetic data, presented in [1], can be recreated\r\nby using the function `bfdClassifyToyData`. This function can be applied\r\non the four synthetic datasets included in the toolbox, henceforth\r\nreferred as: **spiral**, **overlap**, **bumpy** and **relevance**.\r\n`bfdClassifyData` also allows the use several type of GP priors, among\r\nthem an RBF and an ARD-composed one. The **spiral** problem was first\r\nproposed by [3] and the dataset included in this distribution is based\r\non the file found at [4].\r\n\r\nGiven the inputs ![](xi.png) and ![](xj.png) we have implemented the RBF\r\nprior in the following way,\r\n![](rbfKernel.png),\r\n\r\nwhere the parameter vector ![](rbfTheta.png).\r\n\r\nThe ARD-composed kernel is defined as\r\n![](ardKernel.png),\r\n\r\nwith a vector of parameters given by ![](ardTheta.png). This kernel is\r\ncomposed of four parts: RBF-ARD, LINEAR-ARD, BIAS and NOISE parts, thus\r\ngiving its name of 'composed'.\r\n\r\n#### RBF experiments\r\n\r\nJust run the following commands from Matlab's command prompt\r\n\r\n```matlab   \r\n>> dataset = 'overlap';    \r\n>> kernelType = {'rbf', 'bias', 'white'};     \r\n>> model = bfdClassifyToyData(dataset, kernelType);       `\r\n```\r\nFor each dataset (`spiral`, `overlap`, `bumpy` and `relevance`) these\r\ncommands should produce the plots shown below. The function\r\n`bfdClassifyToyData ` also returns a structure **model** containing all\r\nthe information about the discriminant.\r\n\r\n![](full-spiral.png)![](overlap.png) \r\n Classification of synthetic datasets using an RBF kernel. Two classes\r\nare shown as pluses and circles. The separating line, in blue, was\r\nobtained by projecting test data over a grid. The dotted line indicates\r\npoints at 1/4 of the distance, as measured in projected space, from the\r\ndecision boundary to the class mean. The blue line was obtained after\r\ntraining a BFD model by maximising the marginal log-likelihood, **L**.  \r\n*Left*: Spiral data, with bound after training **L**=658.6107.  \r\n*Right*: Overlap data with final bound **L**=638.5258. \r\n In both problems the parameters were initialised to ![](theta_k.png).\r\n![](bumpy.png)![](relevance.png) \r\n *Left*: Bumpy data with final bound **L**=609.0547.   *Right*:\r\nRelevance data, with bound **L**=895.7308. \r\n For both problems the initial parameters were set to ![](theta_k.png).\r\n\r\n#### ARD experiments\r\n\r\nIn order to run experiments with the ARD-composed kernel, it is\r\nnecessary to use a different value for the variable `kernelType`, as it\r\nis shown below. \r\n\r\n```matlab   \r\n>> dataset = 'spiral';    \r\n>> kernelType = {'rbfard', 'linard', 'bias', 'white'};     \r\n>> model = bfdClassifyToyData(dataset, kernelType);       `\r\n```\r\n\r\nThe script should produce the plots shown below.\r\n\r\n![](full-spiral_ard.png)![](overlap_ard.png) \r\n *Left*: Spiral data, with final **L**=674.2042. In this experiment we\r\ninitialised ![](theta2Spiral.png) and the rest of parameters\r\n![](thetaRemainSpiral.png) \r\n *Right*: Overlap data, with final **L**=650.0908. This experiment used\r\nas initial parameters ![](theta_k.png).\r\n![](bumpy_ard.png)![](relevance_ard.png) \r\n *Left*: Bumpy data, with final **L**=636.8442.   *Right*: Relevance\r\ndata, with final **L**=998.9992. \r\n In both problems we used an initial![](theta_k.png).\r\n\r\n#### Generating ROC curves and computing AUC's\r\n\r\nThere are several demos included in this distribution and two of them\r\nwere specifically written to obtain some of the results presented in\r\nTable 1 of reference [1]. More specifically, these demos generate ROC\r\ncurves for either **banana** or **breast-cancer** data and then obtain\r\nstatistics related to the AUC's (area under ROC curves).\r\n\r\nThe first demo can be run from the command-line as shown below \r\n\r\n```    \r\n>> demAUCbanana  \r\n```\r\n\r\nAfter execution, a file\r\n\r\n `banana_rbfbiaswhite_test_AUC_info.txt`\r\n\r\n will be created inside the directory `<bfd-path>/bananaROC/`. This file\r\ncontains several statistics related to the ROC curves of **banana** and\r\nshould look like this\r\n\r\n```      \r\nDataset: banana       \r\nKernel used: rbfbiaswhite       \r\nThese are some statistics of the ROC curves       \r\n###########################################       \r\nmean = 0.950725       \r\nmedian = 0.952039       \r\nmax = 0.960705       \r\nmin = 0.929625       \r\nstd = 0.006099   \r\n```\r\n\r\nFurther information in the directory `<bfd-path>/bananaROC/` will be\r\nstored, for example a copy of the ROC curve for every test instance of\r\n**banana**.\r\nThe second demo does the analogue process for **breast-cancer**. Hence\r\nit is required to run \r\n \r\n```matlab    \r\n>> demAUCbreastCancer  \r\n```\r\n\r\nin order to obtain a result of this kind\r\n```      \r\nDataset: breast-cancer       \r\nKernel used: rbfbiaswhite       \r\nThese are some statistics of the ROC curves        \r\n###########################################       \r\nmean = 0.734383       \r\nmedian = 0.736931       \r\nmax = 0.909649       \r\nmin = 0.615699       \r\nstd = 0.052524.  \r\n```\r\n\r\n#### Note on ROC curves\r\n\r\nDuring execution of either of the scripts (`demAUCbanana` or\r\n`demAUCbreastCancer`) the ROC curve of each test instance of the\r\ndatasets will be shown on the screen for a couple of seconds. This\r\nshould look as shown below.\r\n\r\n![](bananaROC_rbfbiaswhite_test_plot_1.png)![](bananaROC_rbfbiaswhite_test_plot_2.png) \r\n Some ROC curves of the test instances of **banana**. *Left*: First\r\ninstance. *Right*: Second instance.\r\n![](breast-cancerROC_rbfbiaswhite_test_plot_1.png)![](breast-cancerROC_rbfbiaswhite_test_plot_2.png) \r\n Some ROC curves of the test instances of **breast-cancer**. *Left*:\r\nFirst instance. *Right*: Second instance.\r\n#### Additional ROC-AUC demo\r\n\r\nAn extra script obtains ROC curves (and additional statistics) for the\r\n**heart** dataset; this time according to the results of Table 2 of\r\nreference [1]. Again, it is only a matter of running a script.\r\n\r\n```   \r\n>> demAUCheart  \r\n```\r\n\r\nThe result file should look as follows.\r\n```      \r\nDataset: heart       \r\nKernel used: rbfardlinardbiaswhite        \r\nThese are some statistics of the ROC curves.      \r\n###########################################       \r\nmean = 0.909429       \r\nmedian = 0.908183       \r\nmax = 0.960591       \r\nmin = 0.845779       \r\nstd = 0.027045   \r\n```\r\n\r\n#### Generating histograms of projected data\r\n\r\nThe histograms presented in Figure 10 of reference [1] can be created by\r\nrunning two scripts. The first script \r\n \r\n\r\n```  \r\n>> demHistTwonorm  \r\n```\r\n\r\nwill display and save on file the histograms of **twonorm** projected\r\ndata. All files related the histograms of **twonorm** will be stored in\r\na directory `<bfd-path>/twonorm_avgHistogram`. Among other things, a\r\ncouple of `.eps` files will contain the average histograms of training\r\nand test data. Such histograms should be like the ones below.\r\n![](hist_trainTwonorm.png)![](hist_testTwonorm.png) \r\n *Left*: Histogram of projected data for training instances of\r\n**twonorm** *Right*: Histogram of projected data for test instances of\r\n**twonorm**.\r\nThe batch of histograms of **waveform** are obtained by running the\r\nscript\r\n\r\n```   \r\n>> demHistWaveform  \r\n```\r\n\r\nwhich generates plots like the following ones.\r\n![](hist_trainWaveform.png)![](hist_testWaveform.png) \r\n *Left*: Histogram of projected data for training instances of\r\n**waveform** *Right*: Histogram of projected data for test instances of\r\n**waveform**\r\n\r\n#### Other experiments\r\n\r\nFurther experiments can be carried out by modifying the scripts\r\npreviously mentioned of by using the functions `bfdClassifyData` and\r\n`bfdClassifyToyData`. Please note that in order to recreate the results\r\nof [1], it will also be necessary to read the file\r\n**experimentResults.txt** included in this distribution. \r\n \r\nTonatiuh Pena Centeno 2006-02-11\r\n\r\nPage last modified on Fri Jan 5 12:19:12 GMT 2007.\r\n","google":"UA-62968536-1","note":"Don't delete this file! It's used internally to help with page regeneration."}